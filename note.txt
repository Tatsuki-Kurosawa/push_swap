双方向循環リストを使う

双方向循環リストは create_twolst によって作成する.
返り値は番兵ノードの次のノードを指すポインタ（双方向循環リストの先頭ノードのようなイメージ）
関数内のwhile文でノードを作成＆前後を紐付ける
while後の binding_guard によって先頭ノードと末尾ノードを紐付ける

双方向循環リスト安心したい
create_twolst内で双方向循環リストを作成し、その先頭ノードを返す（番兵ノードの次のノード）
while内でノードをどんどん繋げていく
headは初回のtwolstadd_backによってノードが代入されるだけで今後変わることはない
binding_guardによって、これまでに作った先頭ノードと末尾ノードを番兵ノードによって繋げる

pushの操作（あるリストの最初のノードを別のリストの最初のノードにする）
ノードを指すポインタのアドレスを取得し、番兵ノードの次のノードを指すようにする

toheadは双方向循環リストが作成された後でないと使えない

はじめにstack_aとstack_bの双方向循環リスト作っておいた方がいい
three_argumentsはスタックひとつ
four_argumentsはスタック二つ
five_argumentsはスタック二つ
six_argumentsはスタック二つ
stackbは作っては削除、作っては削除という方向が望ましいか
どのタイミングがいいか
pushでは実際にノードを削除したり繋げたりしている
paやpbに渡す際には存在stackbは存在していた方がいい
渡す直前に作成するのがいい
渡す直前はどのような状況か
ノードをいくつ作ればいいとかわかるか
ノードが4つということでstackbに1個ノードがあればいいことがわかる

！！！同じものがあったら弾くようにする（課題文に書いてあった気がする）！！！